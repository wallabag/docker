---
- hosts: localhost
  remote_user: root

  vars:

    database_driver: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_DRIVER')|default('pdo_sqlite', true) }}"
    database_host: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_HOST')|default('127.0.0.1', true) }}"
    database_name: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_NAME')|default('symfony', true) }}"
    database_name_file: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_NAME_FILE') }}"
    database_password: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_PASSWORD')|default('~', true) }}"
    database_password_file: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_PASSWORD_FILE') }}"
    database_port: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_PORT')|default('~', true) }}"
    database_root_password_mariadb: "{{ lookup('env', 'MYSQL_ROOT_PASSWORD') }}"
    database_root_password_mariadb_file: "{{ lookup('env', 'MYSQL_ROOT_PASSWORD_FILE') }}"
    database_root_user_postgres: "{{ lookup('env', 'POSTGRES_USER') }}"
    database_root_user_postgres_file: "{{ lookup('env', 'POSTGRES_USER_FILE') }}"
    database_root_password_postgres: "{{ lookup('env', 'POSTGRES_PASSWORD') }}"
    database_root_password_postgres_file: "{{ lookup('env', 'POSTGRES_PASSWORD_FILE') }}"
    database_user: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_USER')|default('root', true) }}"
    database_user_file: "{{ lookup('env', 'SYMFONY__ENV__DATABASE_USER_FILE') }}"
    populate_database: "{{ lookup('env', 'POPULATE_DATABASE')|default(True, true) }}"
    secret: "{{ lookup('env', 'SYMFONY__ENV__SECRET')|default('ovmpmAWXRCabNlMgzlzFXDYmCFfzGv', true) }}"
    secret_file: "{{ lookup('env', 'SYMFONY__ENV__SECRET_FILE') }}"
    mailer_host: "{{ lookup('env', 'SYMFONY__ENV__MAILER_HOST')|default('127.0.0.1', true) }}"
    mailer_user: "{{ lookup('env', 'SYMFONY__ENV__MAILER_USER')|default('~', true) }}"
    mailer_password: "{{ lookup('env', 'SYMFONY__ENV__MAILER_PASSWORD')|default('~', true) }}"
    mailer_password_file: "{{ lookup('env', 'SYMFONY__ENV__MAILER_PASSWORD_FILE') }}"
    from_email: "{{ lookup('env', 'SYMFONY__ENV__FROM_EMAIL')|default('wallabag@example.com', true) }}"
    registration: "{{ lookup('env', 'SYMFONY__ENV__FOSUSER_REGISTRATION')|default('true', true) }}"

  tasks:

    - name: get database_name_file
      stat:
        path: "{{ database_name_file }}"
      register: e_database_name_file

    - name: set database_name_file
      set_fact:
        database_name: "{{ lookup('file', database_name_file) }}"
      when: e_database_name_file.stat.exists == True

    - name: get database_password_file
      stat:
        path: "{{ database_password_file }}"
      register: e_database_password_file

    - name: set database_password_file
      set_fact:
        database_password: "{{ lookup('file', database_password_file) }}"
      when: e_database_password_file.stat.exists == True

    - name: get database_root_password_mariadb_file
      stat:
        path: "{{ database_root_password_mariadb_file }}"
      register: e_database_root_password_mariadb_file

    - name: set database_root_password_mariadb_file
      set_fact:
        database_root_password_mariadb: "{{ lookup('file', database_root_password_mariadb_file) }}"
      when: e_database_root_password_mariadb_file.stat.exists == True

    - name: get database_root_password_postgres_file
      stat:
        path: "{{ database_root_password_postgres_file }}"
      register: e_database_root_password_postgres_file

    - name: set database_root_password_postgres_file
      set_fact:
        database_root_password_postgres: "{{ lookup('file', database_root_password_postgres_file) }}"
      when: e_database_root_password_postgres_file.stat.exists == True

    - name: get database_root_user_postgres_file
      stat:
        path: "{{ database_root_user_postgres_file }}"
      register: e_database_root_user_postgres_file

    - name: set database_root_user_postgres_file
      set_fact:
        database_root_user_postgres: "{{ lookup('file', database_root_user_postgres_file) }}"
      when: e_database_root_user_postgres_file.stat.exists == True

    - name: get database_user_file
      stat:
        path: "{{ database_user_file }}"
      register: e_database_user_file

    - name: set database_user_file
      set_fact:
        database_user: "{{ lookup('file', database_user_file) }}"
      when: e_database_user_file.stat.exists == True

    - name: get secret_file
      stat:
        path: "{{ secret_file }}"
      register: e_secret_file

    - name: set secret_file
      set_fact:
        secret: "{{ lookup('file', secret_file) }}"
      when: e_secret_file.stat.exists == True

    - name: get mailer_password_file
      stat:
        path: "{{ mailer_password_file }}"
      register: e_mailer_password_file

    - name: set mailer_password_file
      set_fact:
        mailer_password: "{{ lookup('file', mailer_password_file) }}"
      when: e_mailer_password_file.stat.exists == True

    - name: needed dirs
      file:
        path={{ item }}
        state=directory
      with_items:
        - /var/www/wallabag/app
        - /var/www/wallabag/app/config
        - /var/www/wallabag/data
        - /var/www/wallabag/data/assets
        - /var/www/wallabag/data/db
      notify: chown dir
      tags:
        - firstrun

    - name: write parameters.yml
      template:
        src=templates/parameters.yml.j2
        dest=/var/www/wallabag/app/config/parameters.yml

    - stat:
        path=/var/www/wallabag/data/db/wallabag.sqlite
      register: wallabag_sqlite_db
      when: database_driver == 'pdo_sqlite'

    - name: notify install for sqlite
      debug:
        msg='notify installation script if sqlite db does not exist'
      changed_when: true
      notify: run install
      when: (database_driver == 'pdo_sqlite') and
            (wallabag_sqlite_db.stat.exists == False)

    - name: wait for db container
      wait_for:
        host="{{ database_host }}"
        port="{{ database_port }}"
      when: (database_driver == 'pdo_mysql') or
            (database_driver == 'pdo_pgsql')

    - name: add mariadb db
      mysql_db:
        name="{{ database_name }}"
        state=present
        login_host="{{ database_host }}"
        login_port={{ database_port }}
        login_user=root
        login_password="{{ database_root_password_mariadb }}"
        encoding="utf8mb4"
      notify: run install
      when: (database_driver == 'pdo_mysql') and
            (populate_database == True)
      tags:
        - firstrun

    - name: add mariadb user
      mysql_user:
        name="{{ database_user }}"
        host=%
        password="{{ database_password }}"
        priv={{ database_name }}.*:ALL
        login_host="{{ database_host }}"
        login_port={{ database_port }}
        login_user=root
        login_password="{{ database_root_password_mariadb }}"
        state=present
      when: (database_driver == 'pdo_mysql') and
            (database_user != 'root') and
            (populate_database == True)
      tags:
        - firstrun

    - name: postgresql db
      postgresql_db:
        name="{{ database_name }}"
        state=present
        login_host="{{ database_host }}"
        port={{ database_port }}
        login_user="{{ database_root_user_postgres }}"
        login_password="{{ database_root_password_postgres }}"
      notify: run install
      when: (database_driver == 'pdo_pgsql') and
            (populate_database == True)
      tags:
        - firstrun

    - name: add postgresql user
      postgresql_user:
        name="{{ database_user }}"
        password="{{ database_password }}"
        db={{ database_name }}
        priv=ALL
        login_host="{{ database_host }}"
        port={{ database_port }}
        login_user="{{ database_root_user_postgres }}"
        login_password="{{ database_root_password_postgres }}"
        state=present
      when: (database_driver == 'pdo_pgsql') and
            (database_user != 'postgres') and
            (populate_database == True)
      tags:
        - firstrun

    - name: remove cache
      file:
        path=/var/www/wallabag/var/cache
        state=absent

    - name: run composer
      shell: SYMFONY_ENV=prod composer install --no-dev -o --prefer-dist
      args:
        chdir: /var/www/wallabag
      notify: chown dir

  handlers:

    - name: run install
      shell: php bin/console wallabag:install --env=prod -n
      args:
        chdir: /var/www/wallabag
      notify: chown dir

    - name: chown dir
      file:
        path=/var/www/wallabag
        recurse=yes
        owner=nobody
        group=nobody

